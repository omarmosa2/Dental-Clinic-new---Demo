/**
 * ูููุฏ ููุงุชูุญ ุงูุชุฑุฎูุต ููุฅูุชุงุฌ
 * Production License Keys Generator
 * 
 * ููุดุฆ 1000 ููุชุงุญ ุชุฑุฎูุต ุนุดูุงุฆู ุชูุงูุงู ูุง ูููู ุงูุชูุจุค ุจู
 * ููุงุณุชุฎุฏุงู ูู ุจูุน ุงููุณุฎ ุงูุชุฌุงุฑูุฉ
 */

const crypto = require('crypto')
const fs = require('fs')
const path = require('path')

// ุฅุนุฏุงุฏุงุช ุงููููุฏ
const CONFIG = {
  totalKeys: 1000,
  outputFile: 'production-licenses.json',
  backupFile: 'production-licenses-backup.json',
  charset: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',
  segmentLength: 5,
  segmentCount: 4,
  useSecureRandom: true
}

/**
 * ุฅูุดุงุก ุญุฑู ุนุดูุงุฆู ุขูู
 */
function getSecureRandomChar() {
  const randomBytes = crypto.randomBytes(1)
  const randomIndex = randomBytes[0] % CONFIG.charset.length
  return CONFIG.charset[randomIndex]
}

/**
 * ุฅูุดุงุก ููุทุน ุนุดูุงุฆู ุขูู (5 ุฃุญุฑู)
 */
function generateSecureSegment() {
  let segment = ''
  for (let i = 0; i < CONFIG.segmentLength; i++) {
    segment += getSecureRandomChar()
  }
  return segment
}

/**
 * ุฅูุดุงุก ููุชุงุญ ุชุฑุฎูุต ุนุดูุงุฆู ุขูู
 */
function generateSecureLicenseKey() {
  const segments = []
  for (let i = 0; i < CONFIG.segmentCount; i++) {
    segments.push(generateSecureSegment())
  }
  return segments.join('-')
}

/**
 * ุงูุชุญูู ูู ุนุฏู ุชูุฑุงุฑ ุงูููุชุงุญ
 */
function isUniqueKey(key, existingKeys) {
  return !existingKeys.has(key)
}

/**
 * ุฅูุดุงุก ูุนุฑู ูุฑูุฏ ููููุชุงุญ
 */
function generateKeyId() {
  return crypto.randomUUID()
}

/**
 * ุฅูุดุงุก hash ููููุชุงุญ ููุชุญูู ูู ุงูุตุญุฉ
 */
function generateKeyHash(key) {
  return crypto.createHash('sha256').update(key + 'dental-clinic-salt-2025').digest('hex')
}

/**
 * ุฅูุดุงุก ูุนูููุงุช ุฅุถุงููุฉ ููููุชุงุญ
 */
function generateKeyMetadata(keyIndex) {
  const creationDate = new Date().toISOString()
  const expiryDate = null // ูุฏู ุงูุญูุงุฉ
  
  // ุฃููุงุน ุงูุชุฑุฎูุต ุงูุนุดูุงุฆูุฉ
  const licenseTypes = [
    'STANDARD',
    'PROFESSIONAL', 
    'ENTERPRISE',
    'PREMIUM',
    'ULTIMATE'
  ]
  
  const regions = [
    'GLOBAL',
    'MENA',
    'GCC',
    'SAUDI',
    'UAE',
    'KUWAIT',
    'QATAR',
    'BAHRAIN',
    'OMAN'
  ]
  
  return {
    keyIndex: keyIndex + 1,
    licenseType: licenseTypes[Math.floor(Math.random() * licenseTypes.length)],
    region: regions[Math.floor(Math.random() * regions.length)],
    maxDevices: 1, // ููุชุงุญ ูุงุญุฏ ูุฌูุงุฒ ูุงุญุฏ
    isLifetime: true,
    createdAt: creationDate,
    expiresAt: expiryDate,
    isActive: true,
    isUsed: false,
    usedAt: null,
    usedBy: null,
    deviceId: null
  }
}

/**
 * ุฅูุดุงุก ูุฌููุนุฉ ููุงุชูุญ ุงูุชุฑุฎูุต
 */
function generateProductionLicenses() {
  console.log('๐ ุจุฏุก ุฅูุดุงุก ููุงุชูุญ ุงูุชุฑุฎูุต ููุฅูุชุงุฌ...')
  console.log(`๐ ุงูุนุฏุฏ ุงููุทููุจ: ${CONFIG.totalKeys} ููุชุงุญ`)
  console.log('๐ ุงุณุชุฎุฏุงู ุงูุชุดููุฑ ุงูุขูู: ูุนู')
  console.log('')

  const licenses = []
  const existingKeys = new Set()
  const startTime = Date.now()

  for (let i = 0; i < CONFIG.totalKeys; i++) {
    let attempts = 0
    let licenseKey
    
    // ุงูุชุฃูุฏ ูู ุนุฏู ุงูุชูุฑุงุฑ
    do {
      licenseKey = generateSecureLicenseKey()
      attempts++
      
      if (attempts > 100) {
        console.error(`โ ูุดู ูู ุฅูุดุงุก ููุชุงุญ ูุฑูุฏ ุจุนุฏ ${attempts} ูุญุงููุฉ`)
        process.exit(1)
      }
    } while (!isUniqueKey(licenseKey, existingKeys))
    
    existingKeys.add(licenseKey)
    
    // ุฅูุดุงุก ุจูุงูุงุช ุงูููุชุงุญ
    const keyData = {
      id: generateKeyId(),
      key: licenseKey,
      hash: generateKeyHash(licenseKey),
      metadata: generateKeyMetadata(i)
    }
    
    licenses.push(keyData)
    
    // ุนุฑุถ ุงูุชูุฏู
    if ((i + 1) % 100 === 0) {
      const progress = ((i + 1) / CONFIG.totalKeys * 100).toFixed(1)
      console.log(`๐ ุงูุชูุฏู: ${i + 1}/${CONFIG.totalKeys} (${progress}%)`)
    }
  }

  const endTime = Date.now()
  const duration = (endTime - startTime) / 1000

  console.log('')
  console.log('โ ุชู ุฅูุดุงุก ุฌููุน ุงูููุงุชูุญ ุจูุฌุงุญ!')
  console.log(`โฑ๏ธ ุงูููุช ุงููุณุชุบุฑู: ${duration.toFixed(2)} ุซุงููุฉ`)
  console.log(`๐ข ุฅุฌูุงูู ุงูููุงุชูุญ: ${licenses.length}`)
  console.log(`๐ ููุงุชูุญ ูุฑูุฏุฉ: ${existingKeys.size}`)

  return licenses
}

/**
 * ุญูุธ ุงูููุงุชูุญ ูู ููู JSON
 */
function saveLicensesToFile(licenses, filename) {
  const outputPath = path.join(__dirname, '..', filename)
  
  const fileData = {
    metadata: {
      title: 'ููุงุชูุญ ุชุฑุฎูุต ูุธุงู ุฅุฏุงุฑุฉ ุงูุนูุงุฏุฉ',
      description: 'ููุงุชูุญ ุชุฑุฎูุต ููุงุณุชุฎุฏุงู ุงูุชุฌุงุฑู - ูุฏู ุงูุญูุงุฉ',
      version: '1.0.0',
      generatedAt: new Date().toISOString(),
      totalKeys: licenses.length,
      format: 'XXXXX-XXXXX-XXXXX-XXXXX',
      isLifetime: true,
      maxDevicesPerKey: 1,
      generator: 'Production License Generator v1.0'
    },
    statistics: {
      totalKeys: licenses.length,
      activeKeys: licenses.filter(l => l.metadata.isActive).length,
      usedKeys: licenses.filter(l => l.metadata.isUsed).length,
      availableKeys: licenses.filter(l => l.metadata.isActive && !l.metadata.isUsed).length,
      licenseTypes: getLicenseTypeStats(licenses),
      regions: getRegionStats(licenses)
    },
    licenses: licenses
  }

  try {
    fs.writeFileSync(outputPath, JSON.stringify(fileData, null, 2), 'utf8')
    console.log(`๐พ ุชู ุญูุธ ุงูููุงุชูุญ ูู: ${outputPath}`)
    
    // ุฅูุดุงุก ูุณุฎุฉ ุงุญุชูุงุทูุฉ
    const backupPath = path.join(__dirname, '..', CONFIG.backupFile)
    fs.writeFileSync(backupPath, JSON.stringify(fileData, null, 2), 'utf8')
    console.log(`๐พ ุชู ุญูุธ ุงููุณุฎุฉ ุงูุงุญุชูุงุทูุฉ ูู: ${backupPath}`)
    
    return outputPath
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุญูุธ ุงูููู:', error)
    throw error
  }
}

/**
 * ุฅุญุตุงุฆูุงุช ุฃููุงุน ุงูุชุฑุงุฎูุต
 */
function getLicenseTypeStats(licenses) {
  const stats = {}
  licenses.forEach(license => {
    const type = license.metadata.licenseType
    stats[type] = (stats[type] || 0) + 1
  })
  return stats
}

/**
 * ุฅุญุตุงุฆูุงุช ุงูููุงุทู
 */
function getRegionStats(licenses) {
  const stats = {}
  licenses.forEach(license => {
    const region = license.metadata.region
    stats[region] = (stats[region] || 0) + 1
  })
  return stats
}

/**
 * ุฅูุดุงุก ููู ููุงุชูุญ ูุจุณุท ููุชูุฒูุน
 */
function createSimplifiedKeysFile(licenses) {
  const simplifiedPath = path.join(__dirname, '..', 'simple-license-keys.txt')
  
  const keysOnly = licenses.map(license => license.key).join('\n')
  
  const header = `# ููุงุชูุญ ุชุฑุฎูุต ูุธุงู ุฅุฏุงุฑุฉ ุงูุนูุงุฏุฉ
# ุชู ุงูุฅูุดุงุก ูู: ${new Date().toLocaleString('ar-SA')}
# ุฅุฌูุงูู ุงูููุงุชูุญ: ${licenses.length}
# ููุน ุงูุชุฑุฎูุต: ูุฏู ุงูุญูุงุฉ
# ููุงุญุธุฉ: ูู ููุชุงุญ ูุนูู ุนูู ุฌูุงุฒ ูุงุญุฏ ููุท
#
# ุชูุณูู ุงูููุชุงุญ: XXXXX-XXXXX-XXXXX-XXXXX
# ูุซุงู: ABCDE-12345-FGHIJ-67890
#
# ========================================

`

  fs.writeFileSync(simplifiedPath, header + keysOnly, 'utf8')
  console.log(`๐ ุชู ุญูุธ ููู ุงูููุงุชูุญ ุงููุจุณุท ูู: ${simplifiedPath}`)
  
  return simplifiedPath
}

/**
 * ุงูุชุญูู ูู ุตุญุฉ ุงูููุงุชูุญ ุงููููุดุฃุฉ
 */
function validateGeneratedKeys(licenses) {
  console.log('\n๐ ุงูุชุญูู ูู ุตุญุฉ ุงูููุงุชูุญ ุงููููุดุฃุฉ...')
  
  const regex = /^[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}-[A-Z0-9]{5}$/
  let validCount = 0
  let invalidKeys = []
  
  licenses.forEach((license, index) => {
    if (regex.test(license.key)) {
      validCount++
    } else {
      invalidKeys.push({ index, key: license.key })
    }
  })
  
  console.log(`โ ููุงุชูุญ ุตุงูุญุฉ: ${validCount}/${licenses.length}`)
  
  if (invalidKeys.length > 0) {
    console.log(`โ ููุงุชูุญ ุบูุฑ ุตุงูุญุฉ: ${invalidKeys.length}`)
    invalidKeys.forEach(invalid => {
      console.log(`   ${invalid.index}: ${invalid.key}`)
    })
    return false
  }
  
  console.log('โ ุฌููุน ุงูููุงุชูุญ ุตุงูุญุฉ!')
  return true
}

/**
 * ุนุฑุถ ููุฎุต ุงููุชุงุฆุฌ
 */
function displaySummary(licenses, outputPath) {
  console.log('\n๐ ููุฎุต ุงููุชุงุฆุฌ:')
  console.log('=' .repeat(50))
  console.log(`๐ข ุฅุฌูุงูู ุงูููุงุชูุญ: ${licenses.length}`)
  console.log(`๐ ููู ุงูุฅุฎุฑุงุฌ: ${path.basename(outputPath)}`)
  console.log(`๐พ ุญุฌู ุงูููู: ${(fs.statSync(outputPath).size / 1024 / 1024).toFixed(2)} MB`)
  
  console.log('\n๐ ุฅุญุตุงุฆูุงุช ุฃููุงุน ุงูุชุฑุงุฎูุต:')
  const typeStats = getLicenseTypeStats(licenses)
  Object.entries(typeStats).forEach(([type, count]) => {
    console.log(`   ${type}: ${count} ููุชุงุญ`)
  })
  
  console.log('\n๐ ุฅุญุตุงุฆูุงุช ุงูููุงุทู:')
  const regionStats = getRegionStats(licenses)
  Object.entries(regionStats).forEach(([region, count]) => {
    console.log(`   ${region}: ${count} ููุชุงุญ`)
  })
  
  console.log('\n๐ก ูุตุงุฆุญ ููุงุณุชุฎุฏุงู:')
  console.log('   โข ุงุญุชูุธ ุจูุณุฎุฉ ุงุญุชูุงุทูุฉ ูู ุงูููู')
  console.log('   โข ูุง ุชุดุงุฑู ุงูููุงุชูุญ ูุจู ุงูุจูุน')
  console.log('   โข ูู ููุชุงุญ ูุนูู ุนูู ุฌูุงุฒ ูุงุญุฏ ููุท')
  console.log('   โข ุงูููุงุชูุญ ุตุงูุญุฉ ูุฏู ุงูุญูุงุฉ')
  console.log('   โข ุงุณุชุฎุฏู ูุธุงู ุชุชุจุน ูุฅุฏุงุฑุฉ ุงูููุงุชูุญ ุงููุจุงุนุฉ')
}

/**
 * ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ
 */
function main() {
  const args = process.argv.slice(2)
  const requestedCount = parseInt(args[0]) || CONFIG.totalKeys

  console.log('๐ญ ูููุฏ ููุงุชูุญ ุงูุชุฑุฎูุต ููุฅูุชุงุฌ')
  console.log('=' .repeat(60))
  console.log(`๐ ุงูุชุงุฑูุฎ: ${new Date().toLocaleString('ar-SA')}`)
  console.log(`๐ฏ ุงููุฏู: ุฅูุดุงุก ${requestedCount} ููุชุงุญ ุชุฑุฎูุต`)
  console.log('')

  try {
    // ุชุญุฏูุซ ุงูุนุฏุฏ ุงููุทููุจ
    CONFIG.totalKeys = requestedCount

    // ุฅูุดุงุก ุงูููุงุชูุญ
    const licenses = generateProductionLicenses()

    // ุงูุชุญูู ูู ุงูุตุญุฉ
    if (!validateGeneratedKeys(licenses)) {
      throw new Error('ูุดู ูู ุงูุชุญูู ูู ุตุญุฉ ุงูููุงุชูุญ')
    }

    // ุญูุธ ุงููููุงุช
    const outputPath = saveLicensesToFile(licenses, CONFIG.outputFile)
    createSimplifiedKeysFile(licenses)

    // ุนุฑุถ ุงูููุฎุต
    displaySummary(licenses, outputPath)

    console.log('\n๐ ุชู ุฅูุดุงุก ููุงุชูุญ ุงูุชุฑุฎูุต ุจูุฌุงุญ!')
    console.log('โ ุฌุงูุฒ ููุงุณุชุฎุฏุงู ุงูุชุฌุงุฑู')

  } catch (error) {
    console.error('\nโ ุฎุทุฃ ูู ุฅูุดุงุก ููุงุชูุญ ุงูุชุฑุฎูุต:', error.message)
    process.exit(1)
  }
}

// ุชุดุบูู ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ
if (require.main === module) {
  main()
}

module.exports = {
  generateProductionLicenses,
  generateSecureLicenseKey,
  saveLicensesToFile,
  validateGeneratedKeys
}
